Adjust the code below:
Now, I will train the model using only one class named "real chest x-ray"

CODE:

# Import libs
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
import os

------------------------------------
# Calculating the mean and standard deviation of the data set
# dataset_path = 'C:\\Users\\Khomp\\Desktop\\Projetos SBC 2025\\ResNet18\\extra\\dataset\\test\\healthy'
import os
import numpy as np
import cv2

def load_images_from_folder(folder, target_size=(256, 256)):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE)
        if img is not None:
            img = cv2.resize(img, target_size)
            images.append(img)
    return images

def compute_mean_std(images):
    stacked_images = np.stack(images, axis=0)
    mean = np.mean(stacked_images)
    std = np.std(stacked_images)
    return mean, std

folder_path = 'C:\\Users\\Khomp\\Desktop\\Projetos SBC 2025\\ResNet18\\extra\\checandoMEDIAeSD'
images = load_images_from_folder(folder_path)
mean, std = compute_mean_std(images)

print(f'Mean: {mean}')
print(f'Standard Deviation: {std}')

------------------------------------
# Define data transformations for grayscale images with the computed mean and std
data_transforms = {
    'train': transforms.Compose([
        transforms.Grayscale(num_output_channels=1),  # Convert to grayscale
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([112.3006 / 255], [85.9841 / 255])  # Normalize using the computed mean and std
    ]),
    'val': transforms.Compose([
        transforms.Grayscale(num_output_channels=1),  # Convert to grayscale
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([112.3006 / 255], [85.9841 / 255])  # Normalize using the computed mean and std
    ]),
}
------------------------------------
data_dir = 'dataset'
------------------------------------
# Define the data directory
data_dir = 'dataset'

# Create data loaders
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'val']}
#image_datasets
------------------------------------
dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4, shuffle=True, num_workers=4) for x in ['train', 'val']}
dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
print(dataset_sizes)

class_names = image_datasets['train'].classes
class_names
------------------------------------
# Load the pre-trained ResNet-18 model
model = models.resnet18(pretrained=True)

# Freeze all layers except the final classification layer
for name, param in model.named_parameters():
    if "fc" in name:  # Unfreeze the final classification layer
        param.requires_grad = True
    else:
        param.requires_grad = False

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)  # Use all parameters


# Move the model to the GPU if available
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model = model.to(device)
------------------------------------
# Training loop
num_epochs = 25
for epoch in range(num_epochs):
    for phase in ['train', 'val']:
        if phase == 'train':
            model.train()
        else:
            model.eval()

        running_loss = 0.0
        running_corrects = 0

        for inputs, labels in dataloaders[phase]:
            inputs = inputs.to(device)
            labels = labels.to(device)

            # Convert grayscale images to RGB
            if inputs.shape[1] == 1:
                inputs = inputs.repeat(1, 3, 1, 1)

            optimizer.zero_grad()

            with torch.set_grad_enabled(phase == 'train'):
                outputs = model(inputs)
                _, preds = torch.max(outputs, 1)
                loss = criterion(outputs, labels)

                if phase == 'train':
                    loss.backward()
                    optimizer.step()

            running_loss += loss.item() * inputs.size(0)
            running_corrects += torch.sum(preds == labels.data)

        epoch_loss = running_loss / dataset_sizes[phase]
        epoch_acc = running_corrects.double() / dataset_sizes[phase]

        print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

print("Training complete!")
------------------------------------
# =========================== Evaluation =========================

from sklearn.metrics import precision_score, recall_score, accuracy_score
import numpy as np
import torch

def evaluate_model(model, dataloaders, dataset_sizes, device):
    model.eval()

    for phase in ['train', 'val']:
        all_preds = []
        all_labels = []

        for inputs, labels in dataloaders[phase]:
            inputs = inputs.to(device)
            labels = labels.to(device)

            # Convert grayscale images to RGB
            if inputs.shape[1] == 1:
                inputs = inputs.repeat(1, 3, 1, 1)

            with torch.set_grad_enabled(False):
                outputs = model(inputs)
                _, preds = torch.max(outputs, 1)

            all_preds.extend(preds.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())

        # Convert lists to NumPy arrays
        all_preds = np.array(all_preds)
        all_labels = np.array(all_labels)

        accuracy = accuracy_score(all_labels, all_preds)
        precision = precision_score(all_labels, all_preds, average='weighted')
        recall = recall_score(all_labels, all_preds, average='weighted')

        print(f'{phase} Accuracy: {accuracy:.4f}')
        print(f'{phase} Precision: {precision:.4f}')
        print(f'{phase} Recall: {recall:.4f} \n')
        

# Call the function after training the model
evaluate_model(model, dataloaders, dataset_sizes, device)

------------------------------------
# Save the model
torch.save(model.state_dict(), 'chest_xray_classification_model.pth')
------------------------------------
import torch
from torchvision import models, transforms
from PIL import Image

# Load the saved model
model = models.resnet18(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, 1000)  # Adjust to match the original model's output units
model.load_state_dict(torch.load('chest_xray_classification_model.pth'))
model.eval()

# Create a new model with the correct final layer
new_model = models.resnet18(pretrained=True)
new_model.fc = nn.Linear(new_model.fc.in_features, 2)  # Adjust to match the desired output units

    # Copy the weights and biases from the loaded model to the new model
new_model.fc.weight.data = model.fc.weight.data[0:2]  # Copy only the first 2 output units
new_model.fc.bias.data = model.fc.bias.data[0:2]
------------------------------------
import gradio as gr
import torch
from torchvision import models, transforms
from PIL import Image

# Define the preprocessing function
def preprocess_image(image):
    preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    input_tensor = preprocess(image)
    input_batch = input_tensor.unsqueeze(0)  # Add a batch dimension
    return input_batch

# Define the prediction function
def predict(image):
    input_batch = preprocess_image(image)

    # Check if CUDA is available and use it if possible
    if torch.cuda.is_available():
        input_batch = input_batch.to('cuda')
        new_model.to('cuda')

    # Perform inference
    with torch.no_grad():
        output = new_model(input_batch)

    # Get the predicted class
    _, predicted_class = output.max(1)
    class_names = ['healthy', 'tuberculosis']  # Make sure these class names match the training data
    predicted_class_name = class_names[predicted_class.item()]

    return predicted_class_name, image

# Create the Gradio interface
def gradio_predict(image):
    predicted_class_name, image = predict(image)
    displayed_image = display_image_with_prediction(predicted_class_name, image)
    return predicted_class_name, displayed_image

iface = gr.Interface(
    fn=gradio_predict,
    inputs=gr.Image(type="pil"),
    outputs=["text", "image"],
    title="Chest X-ray Classification",
    description="Upload a chest X-ray image to classify it as healthy or tuberculosis."
)

# Launch the interface
iface.launch()

# Define a function to display the image with the predicted class name
def display_image_with_prediction(predicted_class_name, image):
    # Display the image with the predicted class name
    image_np = np.array(image)
    plt.imshow(image_np)
    plt.axis('off')
    plt.text(10, 10, f'Predicted: {predicted_class_name}', fontsize=12, color='white', backgroundcolor='red')
    plt.savefig("predicted_image.png")  # Save the plot as an image file
    return Image.open("predicted_image.png")
------------------------------------